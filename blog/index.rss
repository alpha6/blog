<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Just another blog</title>
        <link>http://alpha6.ru</link>
        <atom:link href="http://alpha6.ru/blog/index.rss" rel="self" type="application/rss+xml" />
        <description>Blog feed of Just another blog</description>
        <generator>Statocles 0.045</generator>
        <item>
            <title>Remove messages from Graylog2</title>
            <link>http://alpha6.ru/blog/2015/05/02/elasticsearch-remove-messages</link>
            <guid>http://alpha6.ru/blog/2015/05/02/elasticsearch-remove-messages</guid>
            <description><![CDATA[
                <p>If you want to remove all messages with requested pattern in message body, you have to write following line:</p>

<p>curl -XDELETE 'http://graylog.example:9200/graylog_*/message/_query' -d'{"query" : {"match": { "message" : "SearchPattern"}}}'</p>

<p>remove exact pattern:
curl -XDELETE 'http://graylog.example:9200/graylog_*/message/_query' -d'{"query" : {"term": { "message" : "ExactText"}}}'</p>

                    <p><a href="http://alpha6.ru/blog/2015/05/02/elasticsearch-remove-messages#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/graylog2">graylog2</a>
                    <a href="/blog/tag/elasticsearch">elasticsearch</a>
                </p>
            ]]></description>
            <pubDate>
                Sat, 02 May 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Используем Graylog с Perl</title>
            <link>http://alpha6.ru/blog/2015/04/30/using-perl-and-graylog</link>
            <guid>http://alpha6.ru/blog/2015/04/30/using-perl-and-graylog</guid>
            <description><![CDATA[
                <p>Устанавливаем Graylog. Для опытов я использовал преднастроенную VM для VirtualBox http://docs.graylog.org/en/1.0/pages/installation.html#virtual-machine-appliances</p>

<p>! На момент написания статьи в VM идет версия Graylog-web с багом - при создании dashboard на нее нельзя добавить виджет т.к. JS-скрипт ответственный за разблокировку dashboard падает с ошибкой. Что-бы что-то сделать с дэшбордом на него надо добавить любой виджет с любой страницы. Это делается по клику на иконку возле названия виджета и выбором нужного дэшборда.</p>

<p>Первым делом надо создать Input для логов.
Мы будем использовать GELF формат через Log::Log4perl.
Идем System->Inputs в выпадающем списке выбираем GELF UDP и жмем Launch Input.
В открывшемся окне выбираем ноды на которых будет работать этот инпут, описание, адрес на котором он будет слушать.
Жмем launch, убеждаемся что он стартанул и на этом пока все работы с Graylog закончены.</p>

<p>Теперь устанавливаем пакет <a href="https://metacpan.org/pod/Log::Log4perl::Layout::GELF">Log::Log4perl::Layout::GELF</a>.</p>

<p>Создаем файл конфигурации логгера:</p>

<pre><code>log4perl.logger.graylog                     = INFO, Screen, Graylog

log4perl.appender.Screen                = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr         = 0
log4perl.appender.Screen.layout         = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = [%d] [%p] %m%n
log4perl.appender.Screen.utf8           = 1

log4perl.appender.Graylog          = Log::Log4perl::Appender::Socket
log4perl.appender.Graylog.PeerAddr = graylog.host
log4perl.appender.Graylog.PeerPort = 12201
log4perl.appender.Graylog.Proto    = udp
log4perl.appender.Graylog.layout   = GELF
</code></pre>

<p>Создаем тестовый скрипт:</p>

<pre><code>#!/usr/bin/env perl

use utf8;
use strict;
use Log::Log4perl;

#Загружаем конфигурацию 
Log::Log4perl::init('logger.conf');

#Получаем логгер
my $logger = Log::Log4perl-&gt;get_logger('graylog');

$logger-&gt;info('hello graylog');
$logger-&gt;info('Тестовое сообщение UTF8');
</code></pre>

<p>В теории, этого достаточно для того что бы нужные логи вашего приложения начали идти в Graylog. Но, как обычно, есть нюанс - этот модуль совершенно не представляет что есть более чем однобайтные кодировки и при попытке что-то записать в лог что-то с utf8 мы получим ошибку <code>Wide character in IO::Compress::Gzip::write</code> и в Graylog сообщение не придет.</p>

<p>Для обычных аппендеров, например Screen, эта проблема решается просто - дописываем в конфигурацию флаг включения utf8:</p>

<pre><code>log4perl.appender.FileAppndr.utf8     = 1
</code></pre>

<p>Но в данном случае проблема на уровне layout и этот модуль не обрабатывает такую ситуацию.</p>

<p>Для себя я эту проблему решил просто - сделал форк модуля с названием <a href="https://github.com/alpha6/Log-Log4perl-Layout-GELFUtf">GELFUtf</a> и использую его.</p>

<p>Таким образом в конфиге вместо <code>log4perl.appender.Graylog.layout   = GELF</code> пишу <code>log4perl.appender.Graylog.layout   = GELFUtf</code>.</p>

<p>Подменить фунцию на лету у меня не получилось, скорее всего из-за хитрой архитектуры Log4perl. А лезть патчить в рантайм - овчинка выделки не стоит. Так что пока пользуюсь патченым модулем и коплю силы на создание полноценного патча для оригинального модуля.</p>

                    <p><a href="http://alpha6.ru/blog/2015/04/30/using-perl-and-graylog#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/perl">perl</a>
                    <a href="/blog/tag/graylog">graylog</a>
                </p>
            ]]></description>
            <pubDate>
                Thu, 30 Apr 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>stdout autoflush</title>
            <link>http://alpha6.ru/blog/2015/04/25/stdout-autoflush</link>
            <guid>http://alpha6.ru/blog/2015/04/25/stdout-autoflush</guid>
            <description><![CDATA[
                <p>Классический метод:</p>

<pre><code>$oldfh = select(STDERR); $| = 1; select($oldfh);
</code></pre>

<p>ООП:</p>

<pre><code>use IO::Handle;
STDERR-&gt;autoflush(1);
</code></pre>

                    <p><a href="http://alpha6.ru/blog/2015/04/25/stdout-autoflush#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/snippet">snippet</a>
                    <a href="/blog/tag/perl">perl</a>
                    <a href="/blog/tag/io">io</a>
                </p>
            ]]></description>
            <pubDate>
                Sat, 25 Apr 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Ubuntu 14.04 + Gearman</title>
            <link>http://alpha6.ru/blog/2015/04/23/ubuntu-14-04-gearman</link>
            <guid>http://alpha6.ru/blog/2015/04/23/ubuntu-14-04-gearman</guid>
            <description><![CDATA[
                <p>В базовой установке Gearman в ubuntu 14.04 есть баг - инит-скрипт написан не правильно и в результате Gearman  не реагирует наличие конфиг файла и запускается с настойками по умолчанию. Причем, на одном из серверов у меня проблемма после обновления усугубилась и он перестал запускаться даже с настройками по умолчанию.</p>

<p>Есть два варианта решения проблемы:</p>

<ol>
<li>Пропатчить инит-скрипт, как это сделать можно прочитать <a href="http://jeremykendall.net/2014/09/04/ubuntu-14-dot-04-gearman-config-bug/">здесь</a></li>
<li>Запускать его из под supervisord.</li>
</ol>

<p>У меня все приложения крутятся под supervisor, так что я пошел этим путем. </p>

<p>Минимальный конфиг файл для супервизора:</p>

<pre><code>[program:gearmand]
command=/usr/sbin/gearmand -L 127.0.0.1 --user=gearman --log-file=stderr
autorestart=true
autostart=true
</code></pre>

<p><code>-L 127.0.0.1</code> указано, во первых, что-бы gearman не биндился на внешние интерфейсы (там все закрыто фаирволом, но все же). Во вторых - если на машине включен ipv6, но не настроен, то gearman будет пытаться забиндиться и на ipv6 и падать.</p>

<p>З.Ы. инит для supervisord в 14.04 тоже кривой, но это уже другая история.</p>

                    <p><a href="http://alpha6.ru/blog/2015/04/23/ubuntu-14-04-gearman#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/ubuntu">ubuntu</a>
                    <a href="/blog/tag/gearman">gearman</a>
                    <a href="/blog/tag/bugs">bugs</a>
                </p>
            ]]></description>
            <pubDate>
                Thu, 23 Apr 2015 00:00:00 +0000
            </pubDate>
        </item>
        <item>
            <title>Starting with Rex</title>
            <link>http://alpha6.ru/blog/2015/04/11/starting-with-rex</link>
            <guid>http://alpha6.ru/blog/2015/04/11/starting-with-rex</guid>
            <description><![CDATA[
                <p>В жизни каждого человека настает момент когда ему становится лениво делать одно и то же на удаленных серверах и хочется автоматизации.</p>

<p>В решении этой тяжелой жизненной проблемы нам поможет <a href="http://www.rexify.org">R(?)ex</a>.</p>

<p><strong>Небольшой F.A.Q</strong></p>

<p><strong><em>Что это?</em></strong></p>

<p>Это приложение для управления удаленными(и не очень) серверами и приложениями.</p>

<p><strong><em>Я могу просто написать bash/perl/pithon/ruby/etc-скрипт и он сделает то же самое.</em></strong></p>

<p>Несомненно, но это будет очередное изобретение велосипеда с колесами разной степеньи квадратности. </p>

<p><strong><em>Почему не Puppet/Ansible?</em></strong></p>

<p>Потому что здесь про Perl, но сравнение Rex и Ansible я еще сделаю.</p>

<p><strong>Поехали</strong></p>

<p>Во первых, Rex можно использовать для простого запуска команд на удаленном сервере:</p>

<p><code>rex -H "example.com example.ru" -e "say run 'uptime'"</code></p>

<p>Задачи выполняются последовательно, так что придется подождать пока опросятся все сервера, особенно если их много.</p>

<p>Запуск из консоли это вариант если надо что-то и единоразово посмотреть что там на серверах творится. Но постоянно набирать команды в консоли это решение для сильных духом и памятью.
Мы же как, настоящие программисты, будем осваивать командные файлы.</p>

<p>По умолчанию Rex использует файл под названием Rexfile (удивительное совпадение).</p>

<p>Попробуем сделать что-то полезное.</p>

<p>Создадим Rexfile который будет содержать команду <code>deploy</code>. По этой команде Rex пойдет на удаленный сервер и сделает там <code>git pull</code> для сайта. Простейшний вариант деплоя.</p>

<pre><code> use Rex -feature =&gt; ['1.0'];

 user "myuser";
 private_key "/home/myuser/.ssh/id_rsa";
 public_key "/home/myuser/.ssh/id_rsa.pub";
 key_auth;

 group myservers =&gt; "example.ru";

 desc "Deploy the blog on example.ru";
 task "deploy", group =&gt; "myservers", sub {
   run "cd /srv/www/example.ru &amp;&amp; git pull origin gh-pages";
 };
</code></pre>

<p>Теперь можно сказать: <code>rex deploy</code></p>

<p>Дальше Rex залогинится под пользователем "myuser" с использованием указанных ключей и выполнит команду указанную в опции run. Если пользователь на удаленном сервер совпадает с текущим - то первую секцию можно опустить. Будет использоваться текущий пользователь и его настройки ключей для ssh. Но если планируется использование команды через cron - то указывать надо обязательно, иначе ничего работать не будет.</p>

<p>Так же можно обновлять конфигурацию копируя на хосты необходимые файлы (вы же не храните авторизационные данные в Git, правда?)
приведем содержимое раздела task к виду:</p>

<pre><code> run "cd /srv/www/example.ru &amp;&amp; git pull origin gh-pages";
 file "/srv/www/example.ru/test.conf",
     source    =&gt; "files/test.conf";
</code></pre>

<p>Теперь при выполнении <code>rex deploy</code> будет выполнен <code>pull</code> из репозитория на удаленном сервере, а затем туда будет скопирован файл <code>files/test.conf</code>.</p>

<p>В принципе, этого совершенно достаточно для деплоя простого сайта не требующего перезапуска сервисов. Таким скриптом деплоится этот блог. Пошаговый мануал о том, как сделать настройку сервера с нуля до продакшена одной командой будет в следующей статье.</p>

<p>А те кому не хочется ждать - могут почитать <a href="http://www.rexify.org/howtos/index.html#howtos">официальную документацию</a>, она весьма подробная и с хорошими примерами.</p>

                    <p><a href="http://alpha6.ru/blog/2015/04/11/starting-with-rex#section-2">Continue reading...</a></p>
                <p>Tags:
                    <a href="/blog/tag/Rex">Rex</a>
                    <a href="/blog/tag/Perl">Perl</a>
                    <a href="/blog/tag/Automation">Automation</a>
                </p>
            ]]></description>
            <pubDate>
                Sat, 11 Apr 2015 00:00:00 +0000
            </pubDate>
        </item>
    </channel>
</rss>

