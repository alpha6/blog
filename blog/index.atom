<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://alpha6.ru/blog/</id>
    <title>Just another blog</title>
    <updated>2015-12-26T12:51:45Z</updated>
    <link href="http://alpha6.ru/blog/index.atom" rel="self" />
    <link href="http://alpha6.ru/blog/" rel="alternate" />
    <generator version="0.061">Statocles</generator>
    <entry>
        <id>http://alpha6.ru/blog/2015/12/26/state-variabes-in-perl/</id>
        <title>State переменные в Perl</title>
        <link href="http://alpha6.ru/blog/2015/12/26/state-variabes-in-perl/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>В Perl существует особый тип переменных под названием state.</p>

<p>В <a href="http://perldoc.perl.org/functions/state.html">доке</a> про них написано:</p>

<blockquote>
  <p>state declares a lexically scoped variable, just like my. However, those variables will never be reinitialized ...</p>
</blockquote>

<p>На первый взгляд это дает нам возможность очень просто реализовывать счетчики и иже с ними:</p>

<pre><code>sub count {
  state $count = 0;
  $count++;
}
</code></pre>

<p>Однако, есть нюанс - фраза <em>will never be reinitialized</em> означает что переменная действительно никогда не будет переинициализирована пока существует родительский скрипт. И это дает нам вот такую замечательную граблю на которую можно ненароком наступить:</p>

<p>Объявляем пакет:</p>

<pre><code>package MyTestState;

use strict;
use feature &#39;state&#39;;

sub new {
  bless {}, shift;
}

sub count {
  state $count = 0;
  $count++;
}

1;
</code></pre>

<p>И саму программу:</p>

<pre><code>use lib &#39;lib&#39;;
use v5.18;
use MyTestState;

my $mystate =  MyTestState-&gt;new();

for (0..10) {
  my $counter = $mystate-&gt;count();
  say &quot;Counter [$counter]&quot;;
}
</code></pre>

<p>Вывод ожидаем:</p>

<pre><code>Counter [0]
Counter [1]
Counter [2]
...
Counter [10]
</code></pre>

<p>А теперь добавляем такой код:</p>

<pre><code>undef $mystate;

say &quot;next object!=======&quot;;

my $mystate1 = MyTestState-&gt;new();
for (0..10) {
  my $counter = $mystate1-&gt;count();
  say &quot;Counter [$counter]&quot;;

}
</code></pre>

<p>Здесь мы удаляем старый объект со счетчиком и создаем новый. Логично предположить что счетчик пойдет заново, но на самом деле нет. Не смотря на то что мы удалили старый объект и создали новый, переменная со счетчиком никуда не делась и не была переиницализирована! И при запуске программы мы увидим:</p>

<pre><code>Counter [0]
Counter [1]
Counter [2]
...
Counter [10]
next object!
Counter [11]
Counter [12]
Counter [13]
...
Counter [20]
Counter [21]
</code></pre>

<p>Так что слово <code>newer</code> в документации действительно значит &quot;никогда пока жив инстанс интерпретатора запустивший скрипт&quot;.</p>

                <p><a href="http://alpha6.ru/blog/2015/12/26/state-variabes-in-perl/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://alpha6.ru/blog/tag/perl/">perl</a>
                <a href="http://alpha6.ru/blog/tag/state/">state</a>
                <a href="http://alpha6.ru/blog/tag/trap/">trap</a>
            </p>
        ]]></content>
        <updated>2015-12-26T00:00:00Z</updated>
        <category term="perl" />
        <category term="state" />
        <category term="trap" />
    </entry>
    <entry>
        <id>http://alpha6.ru/blog/2015/12/23/not-seeking-spotlight/</id>
        <title>Spotlight does not search for</title>
        <link href="http://alpha6.ru/blog/2015/12/23/not-seeking-spotlight/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>If your Spotlight does not search for some files or applications:</p>

<p>The first of all - restart the Spotlight:</p>

<pre><code>sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
</code></pre>

<p>If it have no effect - remove Spotlight&#39;s index:</p>

<p>Stop Spotlight service:</p>

<pre><code>sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
</code></pre>

<p>Remove Spotlight index folder:</p>

<pre><code>sudo rm -rf /.Spotlight-V100
</code></pre>

<p>Run service:</p>

<pre><code>sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.metadata.mds.plist
</code></pre>

<p>After reindex - everything should work well.</p>

                <p><a href="http://alpha6.ru/blog/2015/12/23/not-seeking-spotlight/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://alpha6.ru/blog/tag/Spotlight/">Spotlight</a>
                <a href="http://alpha6.ru/blog/tag/ElCapitan/">ElCapitan</a>
                <a href="http://alpha6.ru/blog/tag/MacOS/">MacOS</a>
            </p>
        ]]></content>
        <updated>2015-12-23T00:00:00Z</updated>
        <category term="Spotlight" />
        <category term="ElCapitan" />
        <category term="MacOS" />
    </entry>
    <entry>
        <id>http://alpha6.ru/blog/2015/10/02/installing-redmine-from-ubuntu-package/</id>
        <title>Installing Redmine from Ubuntu package</title>
        <link href="http://alpha6.ru/blog/2015/10/02/installing-redmine-from-ubuntu-package/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Устанавливаем Redmine из пакетов в Ubuntu. Версия в пакетах не самая свежая, зато никаких заморочек с настройкой руби и интеграцией с БД.</p>

<p>В качестве БД будем использовать Postgresql, на фронтенде Nginx, все совершенно стандартно.</p>

<p>Устанавливаем все нужные пакеты:</p>

<pre><code>sudo apt install redmine redmine-psql postgresql nginx thin
</code></pre>

<p>В вопросах инсталятора <code>redmine</code> выбираем бэкэнд <code>psql</code>, в следующем диалоге на запрос автоматической конфигурации БД говорим <code>yes</code>, оставляем поле пароля пустым. Пароль будет сгенерирован автоматически и данные зальются в схему <code>redmine_default</code>.</p>

<p><code>Redmine</code> установится в <code>/usr/share/redmine</code>, его конфигурация будет лежать в <code>/etc/redmine</code> но сейчас там нет ничего интересного для нас.</p>

<p>Проверим что все работает корректно. Идем в <code>/usr/share/redmine</code> и запускаем <code>Redmine</code> с помощью <code>webrick</code></p>

<pre><code> ruby script/rails server webrick -e production
</code></pre>

<p>Демон запустится на <code>0.0.0.0:3000</code> заходим, проверяем что все работает, гасим демона.</p>

<p>Теперь настроим <code>thin</code> для запуска <code>Redmine</code>. Создадим конфиг файл:</p>

<pre><code>sudo thin config --config /etc/thin1.9.1/redmine.yml --chdir YOUR_REDMINE_DIRECTORY     --environment production --address 0.0.0.0 --port 3030     --daemonize --log /var/log/thin/redmine.log --pid /var/run/thin/redmine.pid     --user www-data --group www-data --servers 1 --prefix YOUR_PREFIX
</code></pre>

<p><code>YOUR_REDMINE_DIRECTORY</code> - путь к директории куда установлен <code>Redmine</code>, в нашем случае <code>/usr/share/redmine</code>.
<code>YOUR_PREFIX</code> - префикс в адресе по которому будет доступен <code>Redmine</code>, для установки в <code>http://your_redmine.domain/</code> пишем <code>/</code>. Если хотим чтобы доступ был через <code>http://your_redmine.domain/redmine</code> пишем <code>redmine</code>.</p>

<p>Команда для установки в корень по умолчанию будет выглядеть как-то так:</p>

<pre><code>sudo thin config --config /etc/thin1.9.1/redmine.yml --chdir /usr/share/redmine --environment production --address 0.0.0.0 --port 3030 --daemonize --log /var/log/thin/redmine.log --pid /var/run/thin/redmine.pid --user www-data --group www-data --servers 1 --prefix /
</code></pre>

<p>Теперь настроим <code>Nginx</code>.</p>

<p>Создадим файл <code>/etc/nginx/sites-available/redmine</code> со следующим содержимым:</p>

<pre><code>upstream redmine_thin_servers {
    server 0.0.0.0:3030;
}

server {

  listen   80; ## listen for ipv4

  server_name your_redmine.domain;
  server_name_in_redirect off;

  proxy_set_header        Host $http_host;
  proxy_set_header        X-Real-IP $remote_addr;
  proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header        X-Forwarded-Proto $scheme;
  proxy_redirect off;

  location / {
    root   /usr/share/redmine/public;

    error_page 404  404.html;
    error_page 500 502 503 504  500.html;

    try_files $uri/index.html $uri.html $uri @redmine_thin_servers;
  }

  location @redmine_thin_servers {
    proxy_pass http://redmine_thin_servers;
  }
}
</code></pre>

<p>Создадим на него ссылку в <code>/etc/nginx/sites-enabled</code></p>

<pre><code>cd /etc/nginx/sites-enabled
sudo ln -s ../sites-available/redmine
</code></pre>

<p>Запустим <code>thin</code> и <code>nginx</code></p>

<pre><code>sudo service thin start
sudo service nginx start
</code></pre>

<p>После этого <code>redmine</code> должен быть доступен на 80м порту вашего домена. Если там 502 или еще чего - значит конфигурация отличается и надо смотреть какую ошибку пишут в логах <code>thin</code> и <code>redmine</code>.</p>

<p>Теперь закроем все это дело firewall. Так как никаких творческих решений нам не нужно, а нужно чтобы работало - то будем использовать <code>ufw</code></p>

<p>Оставим открытыми только ssh и http(80) порты</p>

<p>sudo apt install ufw
  ufw allow ssh
  ufw allow http
  ufw enable</p>

<p>Это установит ufw, добавит ssh и http в список разрешенных портов, заблокирует все остальные и добавит правил firewall в автозагрузку при старте системы.</p>

<p>Enjoy.</p>

                <p><a href="http://alpha6.ru/blog/2015/10/02/installing-redmine-from-ubuntu-package/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://alpha6.ru/blog/tag/Redmine/">Redmine</a>
                <a href="http://alpha6.ru/blog/tag/Postgresql/">Postgresql</a>
                <a href="http://alpha6.ru/blog/tag/nginx/">nginx</a>
                <a href="http://alpha6.ru/blog/tag/Ubuntu/">Ubuntu</a>
            </p>
        ]]></content>
        <updated>2015-10-02T00:00:00Z</updated>
        <category term="Redmine" />
        <category term="Postgresql" />
        <category term="nginx" />
        <category term="Ubuntu" />
    </entry>
    <entry>
        <id>http://alpha6.ru/blog/2015/09/29/prostgresql-interval-in-future/</id>
        <title>prostgresql interval in future</title>
        <link href="http://alpha6.ru/blog/2015/09/29/prostgresql-interval-in-future/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Чтобы получить значение времени в заданном интервале от текущего момента можно использовать следующий синтаксис:</p>

<pre><code>SELECT NOW() + &#39;5 minutes&#39;::interval;
SELECT NOW() + &#39;5 days&#39;::interval;
</code></pre>

<p>Работает и в плюс и в минус.</p>

                <p><a href="http://alpha6.ru/blog/2015/09/29/prostgresql-interval-in-future/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://alpha6.ru/blog/tag/Postgresql/">Postgresql</a>
                <a href="http://alpha6.ru/blog/tag/data/">data</a>
                <a href="http://alpha6.ru/blog/tag/timestamp/">timestamp</a>
            </p>
        ]]></content>
        <updated>2015-09-29T00:00:00Z</updated>
        <category term="Postgresql" />
        <category term="data" />
        <category term="timestamp" />
    </entry>
    <entry>
        <id>http://alpha6.ru/blog/2015/09/19/dbd-pg-install/</id>
        <title>DBD::Pg install</title>
        <link href="http://alpha6.ru/blog/2015/09/19/dbd-pg-install/" rel="alternate" />
        <content type="html"><![CDATA[
            <p>Markdown content goes here.</p>

<p>Если при установке <code>DBD::Pg</code> через <code>CPAN</code> у вас начинают спрашивать какие-то странные слова про номер версии и расположение директорий Postgresql - проверьте что у вас установлен пакет <code>postgresql-server-dev-X.X</code> (<code>postgresql-server-dev-all</code>).</p>

<p>После его установки проблема магическим (на самом деле нет) образом исчезает.</p>

                <p><a href="http://alpha6.ru/blog/2015/09/19/dbd-pg-install/#section-2">Continue reading...</a></p>
            <p>Tags:
                <a href="http://alpha6.ru/blog/tag/Ubuntu/">Ubuntu</a>
                <a href="http://alpha6.ru/blog/tag/Postgresql/">Postgresql</a>
                <a href="http://alpha6.ru/blog/tag/Perl/">Perl</a>
                <a href="http://alpha6.ru/blog/tag/DBD::Pg/">DBD::Pg</a>
            </p>
        ]]></content>
        <updated>2015-09-19T00:00:00Z</updated>
        <category term="Ubuntu" />
        <category term="Postgresql" />
        <category term="Perl" />
        <category term="DBD::Pg" />
    </entry>
</feed>

